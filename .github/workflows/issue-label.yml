name: Issue Check
on:
  issues:
    types: [labeled]
permissions:
  contents: read
jobs:
  parse:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.issue-parser.outputs.issueparser_matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: jhipster-scripts
      - uses: mshima/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: jhipster-scripts/.github/ISSUE_TEMPLATE/update.yml
      - run: cat ${HOME}/issue-parser-result.json
      - run: echo $BLUEPRINT
        env:
          BLUEPRINT: ${{ steps.issue-parser.outputs.issueparser_blueprint }}
  upgrade:
    uses: mshima/jhipster-scripts/.github/workflows/upgrade.yml@main
    if: "${{ github.event.label.name == 'upgrade' }}"
    permissions:
      contents: write
      pull-requests: write
    needs: [parse]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.parse.outputs.matrix)}}
    with:
      blueprint: ${{ matrix.blueprint }}
      owner: ${{ matrix.owner }}
      extra-args: ${{ matrix.extra_args }}
    secrets: inherit
  comment:
    runs-on: ubuntu-latest
    needs: [upgrade]
    permissions:
      issues: write
    steps:
      - uses: mshick/add-pr-comment@v2.8.2
        with:
          issue: ${{ github.event.issue.number }}
          refresh-message-position: true
          message: |
            PR generated: ${{ needs.upgrade.outputs.pull-request-url }}
  remove_label:
    runs-on: ubuntu-latest
    needs: [parse]
    if: success() || failure()
    permissions:
      issues: write
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issue = { owner: context.issue.owner, repo: context.issue.repo, issue_number: context.issue.number }
            github.rest.issues.listLabelsOnIssue({...issue}).then(response => {
              const labels = response.data
              for (const label of labels) {
                  if (label.name == 'upgrade') {
                      github.rest.issues.removeLabel({...issue, name: label.name})
                  }
              }
            })
